[reddit.creds]
client_id = { optional = false, nmin = 12, nmax = 30, explanation = "The ID of your Reddit app of SCRIPT type", example = "fFAGRNJru1FTz70BzhT3Zg", regex = "^[-a-zA-Z0-9._~+/]+=*$", input_error = "The client ID can only contain printable characters.", oob_error = "The ID should be over 12 and under 30 characters, double check your input." }
client_secret = { optional = false, nmin = 20, nmax = 40, explanation = "The SECRET of your Reddit app of SCRIPT type", example = "fFAGRNJru1FTz70BzhT3Zg", regex = "^[-a-zA-Z0-9._~+/]+=*$", input_error = "The client ID can only contain printable characters.", oob_error = "The secret should be over 20 and under 40 characters, double check your input." }
username = { optional = false, nmin = 3, nmax = 20, explanation = "The username of your reddit account", example = "JasonLovesDoggo", regex = "^[-_0-9a-zA-Z]+$", oob_error = "A username HAS to be between 3 and 20 characters" }
password = { optional = false, nmin = 8, explanation = "The password of your reddit account", example = "fFAGRNJru1FTz70BzhT3Zg", oob_error = "Password too short" }
2fa = { optional = true, type = "bool", options = [true, false, ], default = false, explanation = "Whether you have Reddit 2FA enabled, Valid options are True and False", example = true }


[reddit.thread]
random = { optional = true, options = [true, false, ], default = false, type = "bool", explanation = "If set to no, it will ask you a thread link to extract the thread, if yes it will randomize it. Default: 'False'", example = "True" }
subreddit = { optional = false, regex = "[_0-9a-zA-Z\\+]+$", nmin = 3, explanation = "What subreddit to pull posts from, the name of the sub, not the URL. You can have multiple subreddits, add an + with no spaces.", example = "AskReddit+Redditdev", oob_error = "A subreddit name HAS to be between 3 and 20 characters" }
post_id = { optional = true, default = "", regex = "^((?!://|://)[+a-zA-Z0-9])*$", explanation = "Used if you want to use a specific post.", example = "urdtfx" }
max_comment_length = { default = 500, optional = false, nmin = 10, nmax = 10000, type = "int", explanation = "max number of characters a comment can have. default is 500", example = 500, oob_error = "the max comment length should be between 10 and 10000" }
min_comment_length = { default = 1, optional = true, nmin = 0, nmax = 10000, type = "int", explanation = "min_comment_length number of characters a comment can have. default is 0", example = 50, oob_error = "the max comment length should be between 1 and 100" }
post_lang = { default = "", optional = true, explanation = "The language you would like to translate to.", example = "es-cr", options = ['','af', 'ak', 'am', 'ar', 'as', 'ay', 'az', 'be', 'bg', 'bho', 'bm', 'bn', 'bs', 'ca', 'ceb', 'ckb', 'co', 'cs', 'cy', 'da', 'de', 'doi', 'dv', 'ee', 'el', 'en', 'en-US', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'ha', 'haw', 'hi', 'hmn', 'hr', 'ht', 'hu', 'hy', 'id', 'ig', 'ilo', 'is', 'it', 'iw', 'ja', 'jw', 'ka', 'kk', 'km', 'kn', 'ko', 'kri', 'ku', 'ky', 'la', 'lb', 'lg', 'ln', 'lo', 'lt', 'lus', 'lv', 'mai', 'mg', 'mi', 'mk', 'ml', 'mn', 'mni-Mtei', 'mr', 'ms', 'mt', 'my', 'ne', 'nl', 'no', 'nso', 'ny', 'om', 'or', 'pa', 'pl', 'ps', 'pt', 'qu', 'ro', 'ru', 'rw', 'sa', 'sd', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tr', 'ts', 'tt', 'ug', 'uk', 'ur', 'uz', 'vi', 'xh', 'yi', 'yo', 'zh-CN', 'zh-TW', 'zu'] }
min_comments = { default = 20, optional = false, nmin = 10, type = "int", explanation = "The minimum number of comments a post should have to be included. default is 20", example = 29, oob_error = "the minimum number of comments should be between 15 and 999999" }

[ai]
ai_similarity_enabled = {optional = true, option = [true, false], default = false, type = "bool", explanation = "Threads read from Reddit are sorted based on their similarity to the keywords given below"}
ai_similarity_keywords = {optional = true, type="str", example= 'Elon Musk, Twitter, Stocks', explanation = "Every keyword or even sentence, seperated with comma, is used to sort the reddit threads based on similarity"}

[settings]
allow_nsfw = { optional = false, type = "bool", default = false, example = false, options = [true, false, ], explanation = "Whether to allow NSFW content, True or False" }
theme = { optional = false, default = "dark", example = "light", options = ["dark", "light", "transparent", ], explanation = "Sets the Reddit theme, either LIGHT or DARK. For story mode you can also use a transparent background." }
times_to_run = { optional = false, default = 1, example = 2, explanation = "Used if you want to run multiple times. Set to an int e.g. 4 or 29 or 1", type = "int", nmin = 1, oob_error = "It's very hard to run something less than once." }
opacity = { optional = false, default = 0.9, example = 0.8, explanation = "Sets the opacity of the comments when overlayed over the background", type = "float", nmin = 0, nmax = 1, oob_error = "The opacity HAS to be between 0 and 1", input_error = "The opacity HAS to be a decimal number between 0 and 1" }
#transition = { optional = true, default = 0.2, example = 0.2, explanation = "Sets the transition time (in seconds) between the comments. Set to 0 if you want to disable it.", type = "float", nmin = 0, nmax = 2, oob_error = "The transition HAS to be between 0 and 2", input_error = "The opacity HAS to be a decimal number between 0 and 2" }
storymode = { optional = true, type = "bool", default = false, example = false, options = [true, false,], explanation = "Only read out title and post content, great for subreddits with stories" }
storymodemethod= { optional = true, default = 1, example = 1, explanation = "Style that's used for the storymode. Set to 0 for single picture display in whole video, set to 1 for fancy looking video ", type = "int", nmin = 0, oob_error = "It's very hard to run something less than once.", options = [0, 1] }
storymode_max_length = { optional = true, default = 1000, example = 1000, explanation = "Max length of the storymode video in characters. 200 characters are approximately 50 seconds.", type = "int", nmin = 1, oob_error = "It's very hard to make a video under a second." }
resolution_w = { optional = false, default = 1080, example = 1440, explantation = "Sets the width in pixels of the final video" }
resolution_h = { optional = false, default = 1920, example = 2560, explantation = "Sets the height in pixels of the final video" }
zoom = { optional = true, default = 1, example = 1.1, explanation = "Sets the browser zoom level. Useful if you want the text larger.", type = "float", nmin = 0.1, nmax = 2, oob_error = "The text is really difficult to read at a zoom level higher than 2" }
channel_name = { optional = true, default = "Reddit Tales", example = "Reddit Stories", explanation = "Sets the channel name for the video" }
expand_abbreviations = { optional = true, type = "bool", default = false, example = false, explanation = "If enabled, common abbreviations (e.g., 'etc' or 'etc.') will be expanded to 'etcetera' for improved TTS pronunciation." }


[settings.background]
background_video = { optional = true, default = "minecraft", example = "rocket-league", options = ["minecraft", "gta", "rocket-league", "motor-gta", "csgo-surf", "cluster-truck", "minecraft-2","minecraft-3", "minecraft-4", "minecraft-5", "minecraft-2025-05-02","minecraft-2025-05-19","multiversus","fall-guys","steep", "satisfying-1", "nature", "drone",   ""], explanation = "Sets the background for the video based on game name" }
background_audio = { optional = true, default = "lofi", example = "chill-summer", options = ["lofi","lofi-2","lofi-3","chill-summer","suspense", "cinematic","calm",  ""], explanation = "Sets the background audio for the video" }
background_audio_volume = { optional = true, type = "float", nmin = 0, nmax = 1, default = 0.15, example = 0.05, explanation="Sets the volume of the background audio. If you don't want background audio, set it to 0.", oob_error = "The volume HAS to be between 0 and 1", input_error = "The volume HAS to be a float number between 0 and 1"}
enable_extra_audio = { optional = true, type = "bool", default = false, example = false, explanation="Used if you want to render another video without background audio in a separate folder", input_error = "The value HAS to be true or false"}
background_thumbnail = { optional = true, type = "bool", default = false, example = false, options = [true, false,], explanation = "Generate a thumbnail for the video (put a thumbnail.png file in the assets/backgrounds directory.)" }
background_thumbnail_font_family = { optional = true, default = "arial", example = "arial", explanation = "Font family for the thumbnail text" }
background_thumbnail_font_size = { optional = true, type = "int", default = 96, example = 96, explanation = "Font size in pixels for the thumbnail text" }
background_thumbnail_font_color = { optional = true, default = "#FFFFFF", example = "#FF0000", explanation = "Font color for the thumbnail text; supports hex (#RRGGBB) or comma-separated RGB" }
background_use_template = { optional = true, type = "bool", default = true, example = false, explanation = "If false, skip using the thumbnail template and start captions immediately" }


[settings.thumbnail]
template_path = { optional = true, type = "str", default = "assets/title_template.png", example = "assets/thumbnails/my_custom_template.png", explanation = "Relative or absolute path to the PNG/JPG that will be used as base for the video thumbnail" }
show_subreddit = { optional = true, type = "bool", default = true, example = true, options = [true, false], explanation = "Show subreddit name (r/subreddit) on thumbnail" }
show_author = { optional = true, type = "bool", default = true, example = false, options = [true, false], explanation = "Show author name (u/username) on thumbnail alongside subreddit" }
background_color = { optional = true, default = "33,33,36", example = "45,45,48", explanation = "Background color for dynamic thumbnails (R,G,B format)" }
primary_text_color = { optional = true, default = "255,255,255", example = "240,240,240", explanation = "Primary text color (titles, channel name) (R,G,B format)" }
secondary_text_color = { optional = true, default = "180,180,180", example = "150,150,150", explanation = "Secondary text color (subreddit, metrics) (R,G,B format)" }
profile_image_path = { optional = true, type = "str", default = "assets/profile.png", example = "assets/my_profile.jpg", explanation = "Path to profile picture (will be made circular)" }
dynamic_height = { optional = true, type = "bool", default = false, example = true, options = [true, false], explanation = "Use dynamic height based on content instead of fixed template" }

[settings.tts]
random_voice = { optional = false, type = "bool", default = true, example = true, options = [true, false,], explanation = "Randomizes the voice used for each comment" }
elevenlabs_voice_name = { optional = false, default = "Bella", example = "Bella", explanation = "The voice used for elevenlabs", options = ["Adam", "Antoni", "Arnold", "Bella", "Domi", "Elli", "Josh", "Rachel", "Sam", "Laura" ] }
elevenlabs_api_key = { optional = true, example = "21f13f91f54d741e2ae27d2ab1b99d59", explanation = "Elevenlabs API key" }
aws_polly_voice = { optional = false, default = "Matthew", example = "Matthew", explanation = "The voice used for AWS Polly" }
streamlabs_polly_voice = { optional = false, default = "Matthew", example = "Matthew", explanation = "The voice used for Streamlabs Polly" }
tiktok_voice = { optional = true, default = "en_us_001", example = "en_us_006", explanation = "The voice used for TikTok TTS" }
tiktok_sessionid = { optional = true, example = "c76bcc3a7625abcc27b508c7db457ff1", explanation = "TikTok sessionid needed if you're using the TikTok TTS. Check documentation if you don't know how to obtain it." }
python_voice = { optional = false, default = "1", example = "1", explanation = "The index of the system tts voices (can be downloaded externally, run ptt.py to find value, start from zero)" }
py_voice_num = { optional = false, default = "2", example = "2", explanation = "The number of system voices (2 are pre-installed in Windows)" }
silence_duration = { optional = true, example = "0.1", explanation = "Time in seconds between TTS comments", default = 0.3, type = "float" }
no_emojis = { optional = false, type = "bool", default = false, example = false, options = [true, false,], explanation = "Whether to remove emojis from the comments" }
openai_api_url = { optional = true, default = "https://api.openai.com/v1/", example = "https://api.openai.com/v1/", explanation = "The API endpoint URL for OpenAI TTS generation" }
openai_api_key = { optional = true, example = "sk-abc123def456...", explanation = "Your OpenAI API key for TTS generation" }
openai_voice_name = { optional = false, default = "alloy", example = "alloy", explanation = "The voice used for OpenAI TTS generation", options = ["alloy", "ash", "coral", "echo", "fable", "onyx", "nova", "sage", "shimmer", "ballad"] }
openai_model = { optional = false, default = "tts-1", example = "tts-1", explanation = "The model variant used for OpenAI TTS generation", options = ["tts-1", "tts-1-hd", "gpt-4o-mini-tts"] }
openai_speed = { optional = true, type = "float", default = 1.0, nmin = 0.25, nmax = 4.0, example = 1.1, explanation = "Speech speed for OpenAI TTS (0.25 to 4.0, where 1.0 is normal speed)" }
openai_instructions = { optional = true, default = "", example = "Speak in a clear, engaging voice", explanation = "Instructions for gpt-4o-mini-tts model to control speaking style (only works with gpt-4o-mini-tts)" }
# Kokoro TTS configuration
kokoro_url = { optional = false, default = "https://api.kokoro.example", example = "https://api.kokoro.example", explanation = "Base URL for your Kokoro TTS service" }
kokoro_api_key = { optional = false, example = "sk-yourkokorokey…", explanation = "Your API key for Kokoro TTS authentication" }
kokoro_voice = { optional = false, default = "af_heart", example = "af_heart", explanation = "Voice identifier to use for Kokoro TTS", options = ["af_heart","af_alloy","ff_siwis","af_sarah","am_puck","am_fenrir", "am_fenrir+am_puck+af_heart"] }
kokoro_model = { optional = false, default = "kokoro", example = "kokoro", explanation = "Model variant for Kokoro TTS", options = ["tts-1","tts-1-hd","kokoro"] }
kokoro_captioned = { optional = true, default = false, example = false, explanation = "Whether to use the captioned_speech endpoint (for word-level timestamps)" }
# ─── Google Cloud TTS ──────────────────────────────────────────────────────────
gcloud_sa_json        = { optional = true,  default = "gcloud_sa.json", explanation = "Pfad zur Service-Account-JSON. Wenn leer, nutzt das SDK GOOGLE_APPLICATION_CREDENTIALS." }
gcloud_voice          = { optional = false, default = "en-US-Standard-A", example = "en-US-Neural2-D", explanation = "Name der Google-Cloud-Stimme (→ list_voices API)" }
gcloud_language_code  = { optional = false, default = "en-US", example = "de-DE", explanation = "Sprache / Region" }
gcloud_speed          = { optional = true,  type = "float", default = 1.0, nmin = 0.25, nmax = 4.0, explanation = "Sprech­geschwindigkeit 0.25–4.0" }
# ── Speechify TTS ────────────────────────────────────────────────────────────
speechify_api_key        = { optional = true, example = "sk-speechify-key123", explanation = "API key from https://console.sws.speechify.com" }
speechify_voice_id       = { optional = false, default = "simba", explanation = "Default voice_id; find IDs via /v1/voices or playground" }
speechify_audio_format   = { optional = true, default = "mp3", options = ["mp3","wav","ogg","aac"], explanation = "Output format" }
speechify_language_code  = { optional = true, default = "", explanation = "e.g. en-US, de-DE. Leave blank to auto-detect." }
speechify_model          = { optional = true, default = "simba-english", options = ["simba-english","simba-multilingual"], explanation = "Synthesis model" }


[settings.captions]
# Caption rendering settings
captions_font_family = { optional = false, default = "Roboto-Regular", example = "Roboto-Bold", explanation = "Font family (without .ttf) used for on-screen captions" }
captions_font_size = { optional = false, default = 24, example = 24, explanation = "Font size in pixels for caption text" }
captions_color = { optional = false, default = "FFFFFF", example = "FFFFFF", explanation = "Hex color code for normal caption text" }
captions_highlight_color = { optional = false, default = "FFFF00", example = "FF0000", explanation = "Hex color code to highlight the currently spoken word" }
caption_mode = { optional = true, default = "whisper", options = ["whisper", "default_PNG"], explanation = "Caption generation method: whisper for AI-transcribed captions or default_PNG for manual captions" }
whisper_model_size = { optional = true, default = "base", options = ["tiny", "base", "small", "medium", "large", "large-v2", "large-v3"], explanation = "Whisper model size - larger models are more accurate but slower" }
###############################################################################
#  Captions / Subtitle Rendering
###############################################################################
# Wann erscheinen die Captions?
start_after_title      = { optional = true,  type = "bool",  default = true,  example = true, explanation = "Wenn 'true': Die erste Caption wird erst eingeblendet, nachdem der Thumbnail-Titel vollständig vorgelesen wurde." }
# Ab wann soll eine Stille als „echte“ Pause gelten?
pause_threshold        = { optional = true,  type = "float", default = 1.0, nmin = 0.1, nmax = 10, example = 1.2, explanation = "Dauer (in s) ab der eine Pause als Unterbrechung gilt – kürzere Stillen lassen die letzte Caption stehen." }
# Wie viele Wörter werden zu einer Caption zusammengefasst?
words_per_caption      = { optional = true,  type = "int",   default = 6, nmin = 1,  nmax = 20, example = 5,explanation = "Größe des gleitenden Fensters: So viele Wörter sieht man gleichzeitig, das gerade gesprochene Wort wird gehighlightet." }
# Outline / Schatten (ASS-Style)
captions_outline_px    = { optional = true,  type = "int",   default = 2, nmin = 0,  nmax = 10, example = 3, explanation = "Stärke der Kontur in Pixeln" }
captions_shadow_px     = { optional = true,  type = "int",   default = 1, nmin = 0,  nmax = 10, example = 2, explanation = "Schatten-Versatz in Pixeln" }
###############################################################################


[settings.watermark]
enabled          = { optional = true, type = "bool", default = false, example = true, explanation = "If true a small semi-transparent text watermark is shown for the whole video." }
text             = { optional = true, default = "reddit-videomaker-bot", example = "StoryTime • @MyChannel", nmin = 1, nmax = 50, explanation = "Text that will be rendered as watermark" }
opacity          = { optional = true, type = "float", default = 0.25, example = 0.3, nmin = 0.05, nmax = 1.0, explanation = "0 = fully transparent, 1 = opaque" }
font_family      = { optional = true, default = "Roboto-Regular", example = "Roboto-Bold", explanation = "TTF-Font in ./fonts/…  (without extension)" }
font_size        = { optional = true, type = "int", default = 36, example = 48, nmin = 10, nmax = 200, explanation = "Font size for the watermark" }

[settings.rewriter]
enabled = { optional = true, type = "bool", default = false, example = false, explanation = "Enable AI rewriting of Reddit content" }
api_endpoint = { optional = true, default = "https://api.openai.com/v1", example = "https://api.openai.com/v1", explanation = "OpenAI API endpoint (without /chat/completions)" }
api_token = { optional = true, default = "", example = "sk-xyz…", explanation = "OpenAI API key for rewriting" }
model = { optional = true, default = "gpt-4o-mini", example = "gpt-5-mini", explanation = "AI model for rewriting", options = ["gpt-3.5-turbo", "gpt-4", "gpt-4o", "gpt-4o-mini", "gpt-5", "gpt-5-mini", "gpt-5-nano", "gpt-5-chat-latest"] }
system_prompt = { optional = true, default = "You are a skilled content writer who creates engaging social media scripts. Write naturally and authentically while following the given instructions exactly. Always return valid JSON.", example = "You are a Gen-Z content creator...", explanation = "System prompt that defines the AI's role and behavior" }
prompt = { optional = true, default = "Rewrite this into an engaging script:\n\n{original_story}", example = "{json_instructions}\nTarget: {target_group}\n\nRewrite this story: {original_story}", explanation = "User prompt template. Use {target_group}, {original_story}, {json_instructions} as variables" }
target_group = { optional = true, default = "General social media viewers", example = "Gen-Z TikTok users", explanation = "Description of your target audience" }
generate_caption = { optional = true, type = "bool", default = true, explanation = "Generate Instagram/YouTube captions with hashtags" }
reasoning_effort = { optional = true, default = "medium", example = "high", explanation = "GPT-5 only: reasoning complexity level", options = ["minimal", "medium", "high"] }
verbosity = { optional = true, default = "medium", example = "low", explanation = "GPT-5 only: response length control", options = ["low", "medium", "high"] }
